@import '../../theme/variables.scss';

// Faccio in modo che il div sia sempre quadrato
// Sto attento alla compatibilità con almeno Chrome e Firefox
// Reference: https://stackoverflow.com/a/19068538/3687018
@mixin square-size($size) {
  position: relative;
  width: $size;

  &:after {
    content: " ";
    display: block;
    padding-bottom: 100%;
  }
}

$map-shadow: 0 0 3px rgba(204, 204, 204, 0.7);

game-map {
  .map-container {
    /** Creazione del contenitore della mappa in modo che sia responsive
     Grazie a width: 100% mi assicuro che la mappa non sia mai più larga delle dimensioni del browser.
     Ma ciò non basta, voglio anche che la mappa sia sempre tutta visibile all'interno dello schermo.
     Per questo imposto che la larghezza e l'altezza della mappa non possano mai superare l'altezza del browser.
     Solo in questo modo la mappa sarà sempre tutta visibile.
     Uso la funzione calc per togliere dall'altezza del viewport l'header e il footer dell'applicazione
     insieme ai vari margini/padding dei contenitori.
     */
    @include square-size(100%);
    max-width: calc(100vh - (56px + (26px * 2)));
    max-height: calc(100vh - (56px + (26px * 2)));

    .map-grid {
      position: absolute;
      width: 100%;
      height: 100%;
      box-shadow: $map-shadow;

      &-row {
        display: flex;
        flex-flow: row nowrap;
      }

      // Faccio in modo che il div sia sempre quadrato
      // Reference: https://stackoverflow.com/a/19068538/3687018
      // Il contenuto deve poi essere in position: absolute
      &-cell {
        @include square-size(10%);
        box-shadow: inset $map-shadow;

        &.active {
          background-color: rgba(0, 0, 214, .4);
        }

        &:hover {
          background-color: rgba(0, 0, 214, .4);
        }

        // Imposto lo stesso outline di ionic
        .focus-outline &:focus {
          border-color: #51a7e8;
          outline: 2px solid #51a7e8;
          -webkit-box-shadow: 0 0 8px 1px #51a7e8;
          box-shadow: 0 0 8px 1px #51a7e8;
        }
      }
    }
  }

  /***** THEMES *****/
  // Colors
  // Reference: https://sashat.me/2017/01/11/list-of-20-simple-distinct-colors/
  $colors:
    ('red' #e6194b),
    ('green' #3cb44b),
    ('yellow' #ffe119),
    ('blue' #0082c8),
    ('orange' #f58231),
    //('purple' #911eb4),
    ('cyan' #46f0f0),
    //('magenta' #f032e6),
    ('lime' #d2f53c),
    ('pink' #fabebe),
    //('teal' #008080),
    //('lavender' #e6beff),
    //('brown' #aa6e28),
    ('beige' #fffac8),
    //('maroon' #800000),
    //('mint' #aaffc3),
    //('olive' #808000),
    //('coral' #ffd8b1),
    ('navy' #000080),
    ('grey' #808080);
    //('white' #FFFFFF),
    //('black' #000000);

  // 2D Theme
  .theme-2d .map-grid-cell {
    &-planet {
      position: absolute;
      width: 90%;
      height: 90%;
      margin: 5%;
      border-radius: 50%;

      @each $pair in $colors {
        $name: nth($pair, 1);
        $color: nth($pair, 2);
        &.planet-look-#{$name} {
          background-color: $color;
          //border: 4px solid darken($color, 20%);
        }
      }
    }

    &-content {
      position: absolute;
      bottom: 10%;
      width: 100%;
      text-align: center;
      font-size: 1.2em;
      text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
    }
  }

  // 3D Theme
  .theme-3d .map-grid-cell {
    &-planet {
      position: absolute;
      width: 100%;
      height: 100%;
      background-size: cover;

      @each $pair in $colors {
        $name: nth($pair, 1);
        &.planet-look-#{$name} {
          background-image: url($imgs-path + 'planets/planet' + $name + '.png');
        }
      }
    }

    &-content {
      position: absolute;
      bottom: 10%;
      width: 100%;
      text-align: center;
      font-size: 1.2em;
      text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
    }
  }
}
